package com.example.battleshipbackendspring.controller;


import com.example.battleshipbackendspring.logic.GameConversion;
import com.example.battleshipbackendspring.model.Board;
import com.example.battleshipbackendspring.model.Game;
import com.example.battleshipbackendspring.model.GameDTO;
import com.example.battleshipbackendspring.model.PlayerMatches;
import com.example.battleshipbackendspring.repository.GameRepository;
import com.example.battleshipbackendspring.service.GameService;
import com.example.battleshipbackendspring.service.PlayerMatchesService;
import com.google.gson.Gson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.UUID;

@RestController
@RequestMapping("/api/v1/battle")
public class GameController {

    /**
     * Used Gson to parse JSON objects
     */

    private final Gson gson;
    private final GameService gameService;
    private final PlayerMatchesService playerMatchesService;

//    @Autowired
//    private GameRepository gameRepository;

    @Autowired
    public GameController(Gson gson, GameService gameService, PlayerMatchesService playerMatchesService) {
        this.gson = gson;
        this.gameService = gameService;
        this.playerMatchesService = playerMatchesService;
    }

    /**
     * This endpoint is used to show scoreboard
     * Score of users who won at least one game
     */

    @GetMapping(value = "/getAll")
    public String getScoreboard(){
        HashMap<String,String[]> statistic = gameService.getFullStatistic();
        return gson.toJson(statistic);
    }


    /**
     * Initialization of game and player 1
     * @param username
     * @return
     */
    @RequestMapping(value = "/newgame/{username}")
    public GameDTO createPlayer1(@PathVariable String username){
        Game game=null;
        GameDTO gameDTO = new GameDTO(UUID.randomUUID().toString(),username);

        /**
         * gameService will give us back game with user which already exists in MongoDB
         * or create with new user
         */
        game = gameService.getGameByUserName(username);
        game.setUserId(gameDTO.getUserId());

        gameDTO = GameConversion.convertGameInstance(gameDTO,game);
        gameService.saveGame(game);

        PlayerMatches playerMatches = new PlayerMatches(game.getUserId());

        /**
         * socket url is autogenerated by MongoDB when saving
         */
        playerMatchesService.savePlayerMatches(playerMatches);

        String socketUrl = playerMatchesService.findOneByPlayer1(game.getUserId()).getWebSocketAddress();

        gameDTO.setSocketUrl(socketUrl);

        return gameDTO;
    }


    /**
     * Takes UserId and give back username
     * @param userId
     * @return
     */
    @RequestMapping(value = "/getUserName/{userId}")
    public String getUserName(@PathVariable String userId){
        HashMap<String,String> userNameMap =new HashMap<>();
        userNameMap.put("userName",gameService.getGameByUserId(userId).getUserName());
        return gson.toJson(userNameMap);
    }


    /**
     * This username is then
     * displayed at the bottom of the screen of player 1. When player 2 is connected
     * @param sockId - unique socket id for match
     * @return
     */
    @RequestMapping(value = "/getPlayer2/{sockId}")
    public String getPlayer2(@PathVariable String sockId){
        PlayerMatches playerMatches = playerMatchesService.findBySockId(sockId);
        HashMap<String,String> userId = new HashMap<>();
        userId.put("userId",playerMatches.getPlayer2());
        return gson.toJson(userId);
    }


    /**
     * This endpoint is used to create game and table for second player.
     * When the URL (which is generated when player 1 created game) is called in second browser
     * @param userName
     * @param socketUrl
     * @return
     */
    @RequestMapping("/playWithEnemy/{userName}/{socketUrl}")
    public GameDTO createPlayer2(@PathVariable String userName,@PathVariable String socketUrl){
        GameDTO gameDTO=new GameDTO(UUID.randomUUID().toString(),userName);

        Game game = gameService.getGameByUserName(userName);
        game.setUserId(gameDTO.getUserId());

        gameDTO = GameConversion.convertGameInstance(gameDTO,game);
        gameService.saveGame(game);

        PlayerMatches playerMatches = playerMatchesService.findBySockId(socketUrl);
        playerMatches.setPlayer2(gameDTO.getUserId());
        playerMatchesService.savePlayerMatches(playerMatches);
        return gameDTO;
    }


}
